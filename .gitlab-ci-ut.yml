stages:
  - build_for_ut
  - unittest

variables:
  # General project paths
  PROJECT_ROOT: "$CI_PROJECT_DIR/SWE3/Unitconstruction"  #update this path as per your folder structure.
  BUILD_DIR: "$PROJECT_ROOT/build_ut" #update this path as per your folder structure.

  # Manual build variables
  MODULES: "module1 module2" #update this path as per your folder structure.
  MODULE_SRC_SUBDIR: "src" #update this path as per your folder structure.
  MODULE_INC_SUBDIR: "inc" #update this path as per your folder structure.
  MAIN_C_PATH: "$PROJECT_ROOT/main.c" #update this path as per your folder structure.
  COMPILER: gcc   #update  compiler as per your folder structure.
  COMPILER_FLAGS: "-Wall -Wextra --coverage"

  # CMake + GTest variables
  PROJECT_DIR: "$CI_PROJECT_DIR/SWE3/Unitconstruction" #update this path as per your folder structure.
  TEST_REPORT: report.xml
  COVERAGE_INFO: coverage.info
  COVERAGE_DIR: coverage_html
  GTEST_INCLUDE_DIR: /volume1/gtest/googletest/googletest/include
  GTEST_LIB_DIR: /volume1/gtest/googletest/build/lib
  CXXFLAGS: "--coverage"
  LDFLAGS: "--coverage"

build_for_ut:
  stage: build_for_ut
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  tags:
    - JISVR_Hackathon
  script:
    - echo "üßπ Cleaning previous builds to avoid mixed object files"
    - rm -rf "$BUILD_DIR"
    - mkdir -p "$BUILD_DIR"
    - cd "$PROJECT_ROOT"

    # Compile modules manually
    - |
      for module in $MODULES; do
        MODULE_SRC="$PROJECT_ROOT/$module/$MODULE_SRC_SUBDIR"
        MODULE_INC="$PROJECT_ROOT/$module/$MODULE_INC_SUBDIR"
        MODULE_BUILD_DIR="$BUILD_DIR/$module"
        mkdir -p "$MODULE_BUILD_DIR"
        find "$MODULE_SRC" -name "*.c" | while read -r src_file; do
          base_name=$(basename "$src_file" .c)
          obj_file="$MODULE_BUILD_DIR/$base_name.o"
          $COMPILER $COMPILER_FLAGS -I"$MODULE_INC" -c "$src_file" -o "$obj_file"
        done
      done

    # Compile main.c
    - |
      INCLUDES=""
      for module in $MODULES; do
        INCLUDES="$INCLUDES -I$PROJECT_ROOT/$module/$MODULE_INC_SUBDIR"
      done
      $COMPILER $COMPILER_FLAGS $INCLUDES -c "$MAIN_C_PATH" -o "$BUILD_DIR/main.o"

    # Link all objects with coverage
    - find "$BUILD_DIR" -name "*.o" > "$BUILD_DIR/objects.txt"
    - $COMPILER --coverage -o "$BUILD_DIR/all_modules.exe" $(cat "$BUILD_DIR/objects.txt")

    # Build with CMake and gtest
    - cd "$BUILD_DIR"
    - cmake -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" -DGTEST_INCLUDE_DIR=$GTEST_INCLUDE_DIR -DGTEST_LIB_DIR=$GTEST_LIB_DIR ..
    - make

  artifacts:
    paths:
      - $BUILD_DIR

##############################
# Run manual exe + GTest, generate coverage report
unittest:
  stage: unittest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  tags:
    - JISVR_Hackathon
  script:
    - cd $BUILD_DIR

    # Run manual executable
    - |
      if [ -x ./all_module_tests ]; then
        echo "üöÄ Running manual executable"
        ./all_module_tests --gtest_output=xml:report.xml || echo "Manual executable failed"
        echo "üìÇ Listing files after test run:"
        ls -l
        if [ -f report.xml ]; then
          echo "‚úÖ report.xml found!"
        else
          echo "‚ùå report.xml NOT found!"
        fi
      else
        echo "‚ö†Ô∏è Manual executable not found"
      fi


    # Show gcda files
    - echo "üìÑ Listing .gcda files:"
    - find . -name '*.gcda'

    # Collect coverage
    - /usr/bin/lcov --capture --directory . --output-file $COVERAGE_INFO

    # Remove GTest, system, and external includes
    - /usr/bin/lcov --remove $COVERAGE_INFO '/usr/*' '/volume1/gtest/*' '/opt/*' --output-file $COVERAGE_INFO

    # Optionally, only keep your project code (adjust path as needed)
    - |
      /usr/bin/lcov --extract $COVERAGE_INFO "$CI_PROJECT_DIR/SWE3/Unitconstruction/*" --output-file $COVERAGE_INFO

    # Generate HTML coverage report
    - genhtml $COVERAGE_INFO --output-directory $COVERAGE_DIR

    # Evaluate coverage % and enforce threshold
    - |
      COVERAGE=$(lcov --summary $COVERAGE_INFO | grep lines | awk '{print $2}' | sed 's/%//')
      echo "üìä Total Coverage: $COVERAGE%"

      if (( $(echo "$COVERAGE < 50" | bc -l) )); then
        echo "‚ùå Coverage too low (<50%)"
        exit 1
      elif (( $(echo "$COVERAGE >= 90" | bc -l) )); then
        echo "‚úÖ Excellent coverage (>90%)"
      else
        echo "‚ö†Ô∏è Coverage acceptable (50‚Äì90%)"
      fi

  artifacts:
    when: always
    reports:
      junit: SWE3/Unitconstruction/build_ut/report.xml
    paths:
      - SWE3/Unitconstruction/build_ut/report.xml
      - SWE3/Unitconstruction/build_ut/coverage.info
      - SWE3/Unitconstruction/build_ut/coverage_html

